// Code generated by MockGen. DO NOT EDIT.
// Source: society.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockSocietyHandler is a mock of SocietyHandler interface
type MockSocietyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSocietyHandlerMockRecorder
}

// MockSocietyHandlerMockRecorder is the mock recorder for MockSocietyHandler
type MockSocietyHandlerMockRecorder struct {
	mock *MockSocietyHandler
}

// NewMockSocietyHandler creates a new mock instance
func NewMockSocietyHandler(ctrl *gomock.Controller) *MockSocietyHandler {
	mock := &MockSocietyHandler{ctrl: ctrl}
	mock.recorder = &MockSocietyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSocietyHandler) EXPECT() *MockSocietyHandlerMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockSocietyHandler) GetAll(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAll", w, r)
}

// GetAll indicates an expected call of GetAll
func (mr *MockSocietyHandlerMockRecorder) GetAll(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSocietyHandler)(nil).GetAll), w, r)
}

// AdminCreate mocks base method
func (m *MockSocietyHandler) AdminCreate(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminCreate", w, r)
}

// AdminCreate indicates an expected call of AdminCreate
func (mr *MockSocietyHandlerMockRecorder) AdminCreate(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreate", reflect.TypeOf((*MockSocietyHandler)(nil).AdminCreate), w, r)
}

// AdminUpdateByID mocks base method
func (m *MockSocietyHandler) AdminUpdateByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminUpdateByID", w, r)
}

// AdminUpdateByID indicates an expected call of AdminUpdateByID
func (mr *MockSocietyHandlerMockRecorder) AdminUpdateByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateByID", reflect.TypeOf((*MockSocietyHandler)(nil).AdminUpdateByID), w, r)
}

// AdminGetAll mocks base method
func (m *MockSocietyHandler) AdminGetAll(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminGetAll", w, r)
}

// AdminGetAll indicates an expected call of AdminGetAll
func (mr *MockSocietyHandlerMockRecorder) AdminGetAll(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAll", reflect.TypeOf((*MockSocietyHandler)(nil).AdminGetAll), w, r)
}

// AdminGeByID mocks base method
func (m *MockSocietyHandler) AdminGeByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminGeByID", w, r)
}

// AdminGeByID indicates an expected call of AdminGeByID
func (mr *MockSocietyHandlerMockRecorder) AdminGeByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGeByID", reflect.TypeOf((*MockSocietyHandler)(nil).AdminGeByID), w, r)
}

// AdminDeleteByID mocks base method
func (m *MockSocietyHandler) AdminDeleteByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminDeleteByID", w, r)
}

// AdminDeleteByID indicates an expected call of AdminDeleteByID
func (mr *MockSocietyHandlerMockRecorder) AdminDeleteByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeleteByID", reflect.TypeOf((*MockSocietyHandler)(nil).AdminDeleteByID), w, r)
}
