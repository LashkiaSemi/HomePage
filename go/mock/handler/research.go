// Code generated by MockGen. DO NOT EDIT.
// Source: research.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockResearchHandler is a mock of ResearchHandler interface
type MockResearchHandler struct {
	ctrl     *gomock.Controller
	recorder *MockResearchHandlerMockRecorder
}

// MockResearchHandlerMockRecorder is the mock recorder for MockResearchHandler
type MockResearchHandlerMockRecorder struct {
	mock *MockResearchHandler
}

// NewMockResearchHandler creates a new mock instance
func NewMockResearchHandler(ctrl *gomock.Controller) *MockResearchHandler {
	mock := &MockResearchHandler{ctrl: ctrl}
	mock.recorder = &MockResearchHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResearchHandler) EXPECT() *MockResearchHandlerMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockResearchHandler) GetAll(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAll", w, r)
}

// GetAll indicates an expected call of GetAll
func (mr *MockResearchHandlerMockRecorder) GetAll(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockResearchHandler)(nil).GetAll), w, r)
}

// AdminCreate mocks base method
func (m *MockResearchHandler) AdminCreate(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminCreate", w, r)
}

// AdminCreate indicates an expected call of AdminCreate
func (mr *MockResearchHandlerMockRecorder) AdminCreate(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreate", reflect.TypeOf((*MockResearchHandler)(nil).AdminCreate), w, r)
}

// AdminUpdateByID mocks base method
func (m *MockResearchHandler) AdminUpdateByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminUpdateByID", w, r)
}

// AdminUpdateByID indicates an expected call of AdminUpdateByID
func (mr *MockResearchHandlerMockRecorder) AdminUpdateByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateByID", reflect.TypeOf((*MockResearchHandler)(nil).AdminUpdateByID), w, r)
}

// AdminGetAll mocks base method
func (m *MockResearchHandler) AdminGetAll(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminGetAll", w, r)
}

// AdminGetAll indicates an expected call of AdminGetAll
func (mr *MockResearchHandlerMockRecorder) AdminGetAll(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAll", reflect.TypeOf((*MockResearchHandler)(nil).AdminGetAll), w, r)
}

// AdminGetByID mocks base method
func (m *MockResearchHandler) AdminGetByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminGetByID", w, r)
}

// AdminGetByID indicates an expected call of AdminGetByID
func (mr *MockResearchHandlerMockRecorder) AdminGetByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetByID", reflect.TypeOf((*MockResearchHandler)(nil).AdminGetByID), w, r)
}

// AdminDeleteByID mocks base method
func (m *MockResearchHandler) AdminDeleteByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminDeleteByID", w, r)
}

// AdminDeleteByID indicates an expected call of AdminDeleteByID
func (mr *MockResearchHandlerMockRecorder) AdminDeleteByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeleteByID", reflect.TypeOf((*MockResearchHandler)(nil).AdminDeleteByID), w, r)
}
