// Code generated by MockGen. DO NOT EDIT.
// Source: verify.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVerifyHandler is a mock of VerifyHandler interface
type MockVerifyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyHandlerMockRecorder
}

// MockVerifyHandlerMockRecorder is the mock recorder for MockVerifyHandler
type MockVerifyHandlerMockRecorder struct {
	mock *MockVerifyHandler
}

// NewMockVerifyHandler creates a new mock instance
func NewMockVerifyHandler(ctrl *gomock.Controller) *MockVerifyHandler {
	mock := &MockVerifyHandler{ctrl: ctrl}
	mock.recorder = &MockVerifyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVerifyHandler) EXPECT() *MockVerifyHandlerMockRecorder {
	return m.recorder
}

// PasswordHash mocks base method
func (m *MockVerifyHandler) PasswordHash(pw string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordHash", pw)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordHash indicates an expected call of PasswordHash
func (mr *MockVerifyHandlerMockRecorder) PasswordHash(pw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHash", reflect.TypeOf((*MockVerifyHandler)(nil).PasswordHash), pw)
}

// PasswordVerify mocks base method
func (m *MockVerifyHandler) PasswordVerify(hash, pw string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordVerify", hash, pw)
	ret0, _ := ret[0].(error)
	return ret0
}

// PasswordVerify indicates an expected call of PasswordVerify
func (mr *MockVerifyHandlerMockRecorder) PasswordVerify(hash, pw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordVerify", reflect.TypeOf((*MockVerifyHandler)(nil).PasswordVerify), hash, pw)
}
