// Code generated by MockGen. DO NOT EDIT.
// Source: activity.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	entity "homepage/pkg/domain/entity"
	reflect "reflect"
)

// MockActivity is a mock of Activity interface
type MockActivity struct {
	ctrl     *gomock.Controller
	recorder *MockActivityMockRecorder
}

// MockActivityMockRecorder is the mock recorder for MockActivity
type MockActivityMockRecorder struct {
	mock *MockActivity
}

// NewMockActivity creates a new mock instance
func NewMockActivity(ctrl *gomock.Controller) *MockActivity {
	mock := &MockActivity{ctrl: ctrl}
	mock.recorder = &MockActivityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActivity) EXPECT() *MockActivityMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockActivity) GetAll() ([]*entity.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockActivityMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockActivity)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockActivity) GetByID(id int) (*entity.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockActivityMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockActivity)(nil).GetByID), id)
}

// GetUpcoming mocks base method
func (m *MockActivity) GetUpcoming() ([]*entity.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcoming")
	ret0, _ := ret[0].([]*entity.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcoming indicates an expected call of GetUpcoming
func (mr *MockActivityMockRecorder) GetUpcoming() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcoming", reflect.TypeOf((*MockActivity)(nil).GetUpcoming))
}

// GetForNotification mocks base method
func (m *MockActivity) GetForNotification() ([]*entity.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForNotification")
	ret0, _ := ret[0].([]*entity.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForNotification indicates an expected call of GetForNotification
func (mr *MockActivityMockRecorder) GetForNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForNotification", reflect.TypeOf((*MockActivity)(nil).GetForNotification))
}

// Create mocks base method
func (m *MockActivity) Create(activity, showDate, date, annotation string, isImportant, isNotify int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", activity, showDate, date, annotation, isImportant, isNotify)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockActivityMockRecorder) Create(activity, showDate, date, annotation, isImportant, isNotify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActivity)(nil).Create), activity, showDate, date, annotation, isImportant, isNotify)
}

// UpdateByID mocks base method
func (m *MockActivity) UpdateByID(id int, activity, showDate, date, annotation string, isImportant, isNotify int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, activity, showDate, date, annotation, isImportant, isNotify)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockActivityMockRecorder) UpdateByID(id, activity, showDate, date, annotation, isImportant, isNotify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockActivity)(nil).UpdateByID), id, activity, showDate, date, annotation, isImportant, isNotify)
}

// DeleteByID mocks base method
func (m *MockActivity) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockActivityMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockActivity)(nil).DeleteByID), id)
}
