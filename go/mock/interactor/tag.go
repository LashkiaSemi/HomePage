// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	gomock "github.com/golang/mock/gomock"
	entity "homepage/pkg/domain/entity"
	reflect "reflect"
)

// MockTagInteractor is a mock of TagInteractor interface
type MockTagInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockTagInteractorMockRecorder
}

// MockTagInteractorMockRecorder is the mock recorder for MockTagInteractor
type MockTagInteractorMockRecorder struct {
	mock *MockTagInteractor
}

// NewMockTagInteractor creates a new mock instance
func NewMockTagInteractor(ctrl *gomock.Controller) *MockTagInteractor {
	mock := &MockTagInteractor{ctrl: ctrl}
	mock.recorder = &MockTagInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTagInteractor) EXPECT() *MockTagInteractorMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockTagInteractor) GetAll() ([]*entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockTagInteractorMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTagInteractor)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockTagInteractor) GetByID(id int) (*entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockTagInteractorMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTagInteractor)(nil).GetByID), id)
}

// Create mocks base method
func (m *MockTagInteractor) Create(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTagInteractorMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagInteractor)(nil).Create), name)
}

// UpdateByID mocks base method
func (m *MockTagInteractor) UpdateByID(id int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockTagInteractorMockRecorder) UpdateByID(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockTagInteractor)(nil).UpdateByID), id, name)
}

// DeleteByID mocks base method
func (m *MockTagInteractor) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockTagInteractorMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockTagInteractor)(nil).DeleteByID), id)
}
