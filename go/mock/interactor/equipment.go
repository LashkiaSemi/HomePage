// Code generated by MockGen. DO NOT EDIT.
// Source: equipment.go

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	gomock "github.com/golang/mock/gomock"
	entity "homepage/pkg/domain/entity"
	reflect "reflect"
)

// MockEquipmentInteractor is a mock of EquipmentInteractor interface
type MockEquipmentInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockEquipmentInteractorMockRecorder
}

// MockEquipmentInteractorMockRecorder is the mock recorder for MockEquipmentInteractor
type MockEquipmentInteractorMockRecorder struct {
	mock *MockEquipmentInteractor
}

// NewMockEquipmentInteractor creates a new mock instance
func NewMockEquipmentInteractor(ctrl *gomock.Controller) *MockEquipmentInteractor {
	mock := &MockEquipmentInteractor{ctrl: ctrl}
	mock.recorder = &MockEquipmentInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEquipmentInteractor) EXPECT() *MockEquipmentInteractorMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockEquipmentInteractor) GetAll() ([]*entity.Equipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Equipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockEquipmentInteractorMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEquipmentInteractor)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockEquipmentInteractor) GetByID(id int) (*entity.Equipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Equipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockEquipmentInteractorMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEquipmentInteractor)(nil).GetByID), id)
}

// Create mocks base method
func (m *MockEquipmentInteractor) Create(name, comment string, stock, tagID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, comment, stock, tagID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockEquipmentInteractorMockRecorder) Create(name, comment, stock, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEquipmentInteractor)(nil).Create), name, comment, stock, tagID)
}

// UpdateByID mocks base method
func (m *MockEquipmentInteractor) UpdateByID(id int, name, comment string, stock, tagID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, name, comment, stock, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockEquipmentInteractorMockRecorder) UpdateByID(id, name, comment, stock, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockEquipmentInteractor)(nil).UpdateByID), id, name, comment, stock, tagID)
}

// DeleteByID mocks base method
func (m *MockEquipmentInteractor) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockEquipmentInteractorMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockEquipmentInteractor)(nil).DeleteByID), id)
}
