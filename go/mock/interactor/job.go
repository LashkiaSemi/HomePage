// Code generated by MockGen. DO NOT EDIT.
// Source: job.go

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	gomock "github.com/golang/mock/gomock"
	entity "homepage/pkg/domain/entity"
	reflect "reflect"
)

// MockJobInteractor is a mock of JobInteractor interface
type MockJobInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockJobInteractorMockRecorder
}

// MockJobInteractorMockRecorder is the mock recorder for MockJobInteractor
type MockJobInteractorMockRecorder struct {
	mock *MockJobInteractor
}

// NewMockJobInteractor creates a new mock instance
func NewMockJobInteractor(ctrl *gomock.Controller) *MockJobInteractor {
	mock := &MockJobInteractor{ctrl: ctrl}
	mock.recorder = &MockJobInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobInteractor) EXPECT() *MockJobInteractorMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockJobInteractor) GetAll() ([]*entity.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockJobInteractorMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockJobInteractor)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockJobInteractor) GetByID(id int) (*entity.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockJobInteractorMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockJobInteractor)(nil).GetByID), id)
}

// Create mocks base method
func (m *MockJobInteractor) Create(company, job string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", company, job)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockJobInteractorMockRecorder) Create(company, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInteractor)(nil).Create), company, job)
}

// UpdateByID mocks base method
func (m *MockJobInteractor) UpdateByID(id int, company, job string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, company, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockJobInteractorMockRecorder) UpdateByID(id, company, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockJobInteractor)(nil).UpdateByID), id, company, job)
}

// DeleteByID mocks base method
func (m *MockJobInteractor) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockJobInteractorMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockJobInteractor)(nil).DeleteByID), id)
}
