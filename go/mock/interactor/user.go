// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	gomock "github.com/golang/mock/gomock"
	entity "homepage/pkg/domain/entity"
	reflect "reflect"
)

// MockUserInteractor is a mock of UserInteractor interface
type MockUserInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockUserInteractorMockRecorder
}

// MockUserInteractorMockRecorder is the mock recorder for MockUserInteractor
type MockUserInteractorMockRecorder struct {
	mock *MockUserInteractor
}

// NewMockUserInteractor creates a new mock instance
func NewMockUserInteractor(ctrl *gomock.Controller) *MockUserInteractor {
	mock := &MockUserInteractor{ctrl: ctrl}
	mock.recorder = &MockUserInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserInteractor) EXPECT() *MockUserInteractorMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockUserInteractor) GetAll() ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserInteractorMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserInteractor)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockUserInteractor) GetByID(userID int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserInteractorMockRecorder) GetByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserInteractor)(nil).GetByID), userID)
}

// GetByStudentID mocks base method
func (m *MockUserInteractor) GetByStudentID(studentID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStudentID", studentID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStudentID indicates an expected call of GetByStudentID
func (mr *MockUserInteractorMockRecorder) GetByStudentID(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStudentID", reflect.TypeOf((*MockUserInteractor)(nil).GetByStudentID), studentID)
}

// UpdateByID mocks base method
func (m *MockUserInteractor) UpdateByID(userID int, name, studentID, department, comment string, grade int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", userID, name, studentID, department, comment, grade)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockUserInteractorMockRecorder) UpdateByID(userID, name, studentID, department, comment, grade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserInteractor)(nil).UpdateByID), userID, name, studentID, department, comment, grade)
}

// UpdatePasswordByStudentID mocks base method
func (m *MockUserInteractor) UpdatePasswordByStudentID(studentID, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByStudentID", studentID, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordByStudentID indicates an expected call of UpdatePasswordByStudentID
func (mr *MockUserInteractorMockRecorder) UpdatePasswordByStudentID(studentID, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByStudentID", reflect.TypeOf((*MockUserInteractor)(nil).UpdatePasswordByStudentID), studentID, oldPassword, newPassword)
}

// AuthenticationByStudentID mocks base method
func (m *MockUserInteractor) AuthenticationByStudentID(studentID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticationByStudentID", studentID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthenticationByStudentID indicates an expected call of AuthenticationByStudentID
func (mr *MockUserInteractorMockRecorder) AuthenticationByStudentID(studentID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationByStudentID", reflect.TypeOf((*MockUserInteractor)(nil).AuthenticationByStudentID), studentID, password)
}

// AdminAuthorizationByStudentID mocks base method
func (m *MockUserInteractor) AdminAuthorizationByStudentID(studentID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminAuthorizationByStudentID", studentID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminAuthorizationByStudentID indicates an expected call of AdminAuthorizationByStudentID
func (mr *MockUserInteractorMockRecorder) AdminAuthorizationByStudentID(studentID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminAuthorizationByStudentID", reflect.TypeOf((*MockUserInteractor)(nil).AdminAuthorizationByStudentID), studentID, password)
}

// AdminCreate mocks base method
func (m *MockUserInteractor) AdminCreate(name, studentID, password, role, department, comment string, grade int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreate", name, studentID, password, role, department, comment, grade)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreate indicates an expected call of AdminCreate
func (mr *MockUserInteractorMockRecorder) AdminCreate(name, studentID, password, role, department, comment, grade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreate", reflect.TypeOf((*MockUserInteractor)(nil).AdminCreate), name, studentID, password, role, department, comment, grade)
}

// AdminUpdate mocks base method
func (m *MockUserInteractor) AdminUpdate(userID int, name, studentID, role, department, comment string, grade int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdate", userID, name, studentID, role, department, comment, grade)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminUpdate indicates an expected call of AdminUpdate
func (mr *MockUserInteractorMockRecorder) AdminUpdate(userID, name, studentID, role, department, comment, grade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdate", reflect.TypeOf((*MockUserInteractor)(nil).AdminUpdate), userID, name, studentID, role, department, comment, grade)
}

// DeleteByID mocks base method
func (m *MockUserInteractor) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockUserInteractorMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserInteractor)(nil).DeleteByID), id)
}
