// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "homepage/pkg/domain/entity"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockUserRepository) FindAll() ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockUserRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRepository)(nil).FindAll))
}

// FindByID mocks base method
func (m *MockUserRepository) FindByID(userID int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockUserRepositoryMockRecorder) FindByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepository)(nil).FindByID), userID)
}

// FindByStudentID mocks base method
func (m *MockUserRepository) FindByStudentID(studentID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStudentID", studentID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStudentID indicates an expected call of FindByStudentID
func (mr *MockUserRepositoryMockRecorder) FindByStudentID(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStudentID", reflect.TypeOf((*MockUserRepository)(nil).FindByStudentID), studentID)
}

// FindAuthInfoByStudentID mocks base method
func (m *MockUserRepository) FindAuthInfoByStudentID(studentID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAuthInfoByStudentID", studentID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAuthInfoByStudentID indicates an expected call of FindAuthInfoByStudentID
func (mr *MockUserRepositoryMockRecorder) FindAuthInfoByStudentID(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAuthInfoByStudentID", reflect.TypeOf((*MockUserRepository)(nil).FindAuthInfoByStudentID), studentID)
}

// UpdateByID mocks base method
func (m *MockUserRepository) UpdateByID(arg0 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockUserRepositoryMockRecorder) UpdateByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserRepository)(nil).UpdateByID), arg0)
}

// UpdatePasswordByStudentID mocks base method
func (m *MockUserRepository) UpdatePasswordByStudentID(studentID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByStudentID", studentID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordByStudentID indicates an expected call of UpdatePasswordByStudentID
func (mr *MockUserRepositoryMockRecorder) UpdatePasswordByStudentID(studentID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByStudentID", reflect.TypeOf((*MockUserRepository)(nil).UpdatePasswordByStudentID), studentID, password)
}

// AdminCreate mocks base method
func (m *MockUserRepository) AdminCreate(arg0 *entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreate", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreate indicates an expected call of AdminCreate
func (mr *MockUserRepositoryMockRecorder) AdminCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreate", reflect.TypeOf((*MockUserRepository)(nil).AdminCreate), arg0)
}

// AdminUpdateByID mocks base method
func (m *MockUserRepository) AdminUpdateByID(arg0 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminUpdateByID indicates an expected call of AdminUpdateByID
func (mr *MockUserRepositoryMockRecorder) AdminUpdateByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateByID", reflect.TypeOf((*MockUserRepository)(nil).AdminUpdateByID), arg0)
}

// DeleteByID mocks base method
func (m *MockUserRepository) DeleteByID(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockUserRepositoryMockRecorder) DeleteByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserRepository)(nil).DeleteByID), userID)
}
