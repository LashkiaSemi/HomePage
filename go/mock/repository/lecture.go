// Code generated by MockGen. DO NOT EDIT.
// Source: lecture.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "homepage/pkg/domain/entity"
	reflect "reflect"
)

// MockLectureRepository is a mock of LectureRepository interface
type MockLectureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLectureRepositoryMockRecorder
}

// MockLectureRepositoryMockRecorder is the mock recorder for MockLectureRepository
type MockLectureRepositoryMockRecorder struct {
	mock *MockLectureRepository
}

// NewMockLectureRepository creates a new mock instance
func NewMockLectureRepository(ctrl *gomock.Controller) *MockLectureRepository {
	mock := &MockLectureRepository{ctrl: ctrl}
	mock.recorder = &MockLectureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLectureRepository) EXPECT() *MockLectureRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockLectureRepository) FindAll() ([]*entity.Lecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entity.Lecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockLectureRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockLectureRepository)(nil).FindAll))
}

// FindByID mocks base method
func (m *MockLectureRepository) FindByID(id int) (*entity.Lecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Lecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockLectureRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLectureRepository)(nil).FindByID), id)
}

// FindAuthorByStudentID mocks base method
func (m *MockLectureRepository) FindAuthorByStudentID(studentID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAuthorByStudentID", studentID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAuthorByStudentID indicates an expected call of FindAuthorByStudentID
func (mr *MockLectureRepositoryMockRecorder) FindAuthorByStudentID(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAuthorByStudentID", reflect.TypeOf((*MockLectureRepository)(nil).FindAuthorByStudentID), studentID)
}

// Create mocks base method
func (m *MockLectureRepository) Create(arg0 *entity.Lecture) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockLectureRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLectureRepository)(nil).Create), arg0)
}

// UpdateByID mocks base method
func (m *MockLectureRepository) UpdateByID(arg0 *entity.Lecture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockLectureRepositoryMockRecorder) UpdateByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockLectureRepository)(nil).UpdateByID), arg0)
}

// DeleteByID mocks base method
func (m *MockLectureRepository) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockLectureRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockLectureRepository)(nil).DeleteByID), id)
}
