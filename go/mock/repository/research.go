// Code generated by MockGen. DO NOT EDIT.
// Source: research.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "homepage/pkg/domain/entity"
	reflect "reflect"
)

// MockResearchRepository is a mock of ResearchRepository interface
type MockResearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResearchRepositoryMockRecorder
}

// MockResearchRepositoryMockRecorder is the mock recorder for MockResearchRepository
type MockResearchRepositoryMockRecorder struct {
	mock *MockResearchRepository
}

// NewMockResearchRepository creates a new mock instance
func NewMockResearchRepository(ctrl *gomock.Controller) *MockResearchRepository {
	mock := &MockResearchRepository{ctrl: ctrl}
	mock.recorder = &MockResearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResearchRepository) EXPECT() *MockResearchRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockResearchRepository) FindAll() ([]*entity.Research, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entity.Research)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockResearchRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockResearchRepository)(nil).FindAll))
}

// FindByID mocks base method
func (m *MockResearchRepository) FindByID(id int) (*entity.Research, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Research)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockResearchRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockResearchRepository)(nil).FindByID), id)
}

// Create mocks base method
func (m *MockResearchRepository) Create(arg0 *entity.Research) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockResearchRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResearchRepository)(nil).Create), arg0)
}

// UpdateByID mocks base method
func (m *MockResearchRepository) UpdateByID(arg0 *entity.Research) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockResearchRepositoryMockRecorder) UpdateByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockResearchRepository)(nil).UpdateByID), arg0)
}

// DeleteByID mocks base method
func (m *MockResearchRepository) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockResearchRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockResearchRepository)(nil).DeleteByID), id)
}
