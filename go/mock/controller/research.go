// Code generated by MockGen. DO NOT EDIT.
// Source: research.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gomock "github.com/golang/mock/gomock"
	controller "homepage/pkg/interface/controller"
	reflect "reflect"
)

// MockResearchController is a mock of ResearchController interface
type MockResearchController struct {
	ctrl     *gomock.Controller
	recorder *MockResearchControllerMockRecorder
}

// MockResearchControllerMockRecorder is the mock recorder for MockResearchController
type MockResearchControllerMockRecorder struct {
	mock *MockResearchController
}

// NewMockResearchController creates a new mock instance
func NewMockResearchController(ctrl *gomock.Controller) *MockResearchController {
	mock := &MockResearchController{ctrl: ctrl}
	mock.recorder = &MockResearchControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResearchController) EXPECT() *MockResearchControllerMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockResearchController) GetAll() (*controller.ResearchesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*controller.ResearchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockResearchControllerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockResearchController)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockResearchController) GetByID(id int) (*controller.ResearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*controller.ResearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockResearchControllerMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResearchController)(nil).GetByID), id)
}

// Create mocks base method
func (m *MockResearchController) Create(title, author, file, comment string, activation int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", title, author, file, comment, activation)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockResearchControllerMockRecorder) Create(title, author, file, comment, activation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResearchController)(nil).Create), title, author, file, comment, activation)
}

// UpdateByID mocks base method
func (m *MockResearchController) UpdateByID(id int, title, author, file, comment string, activation int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, title, author, file, comment, activation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockResearchControllerMockRecorder) UpdateByID(id, title, author, file, comment, activation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockResearchController)(nil).UpdateByID), id, title, author, file, comment, activation)
}

// DeleteByID mocks base method
func (m *MockResearchController) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockResearchControllerMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockResearchController)(nil).DeleteByID), id)
}

// AdminGetAll mocks base method
func (m *MockResearchController) AdminGetAll() ([]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAll")
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAll indicates an expected call of AdminGetAll
func (mr *MockResearchControllerMockRecorder) AdminGetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAll", reflect.TypeOf((*MockResearchController)(nil).AdminGetAll))
}

// AdminGetByID mocks base method
func (m *MockResearchController) AdminGetByID(id int) (*controller.FieldsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetByID", id)
	ret0, _ := ret[0].(*controller.FieldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetByID indicates an expected call of AdminGetByID
func (mr *MockResearchControllerMockRecorder) AdminGetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetByID", reflect.TypeOf((*MockResearchController)(nil).AdminGetByID), id)
}
