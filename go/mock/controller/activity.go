// Code generated by MockGen. DO NOT EDIT.
// Source: activity.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gomock "github.com/golang/mock/gomock"
	controller "homepage/pkg/interface/controller"
	reflect "reflect"
)

// MockActivityController is a mock of ActivityController interface
type MockActivityController struct {
	ctrl     *gomock.Controller
	recorder *MockActivityControllerMockRecorder
}

// MockActivityControllerMockRecorder is the mock recorder for MockActivityController
type MockActivityControllerMockRecorder struct {
	mock *MockActivityController
}

// NewMockActivityController creates a new mock instance
func NewMockActivityController(ctrl *gomock.Controller) *MockActivityController {
	mock := &MockActivityController{ctrl: ctrl}
	mock.recorder = &MockActivityControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActivityController) EXPECT() *MockActivityControllerMockRecorder {
	return m.recorder
}

// GetAllGroupByYear mocks base method
func (m *MockActivityController) GetAllGroupByYear() ([]*controller.ActivitiesGroupByYearResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroupByYear")
	ret0, _ := ret[0].([]*controller.ActivitiesGroupByYearResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroupByYear indicates an expected call of GetAllGroupByYear
func (mr *MockActivityControllerMockRecorder) GetAllGroupByYear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroupByYear", reflect.TypeOf((*MockActivityController)(nil).GetAllGroupByYear))
}

// GetByID mocks base method
func (m *MockActivityController) GetByID(id int) (*controller.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*controller.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockActivityControllerMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockActivityController)(nil).GetByID), id)
}

// GetUpcoming mocks base method
func (m *MockActivityController) GetUpcoming() (*controller.ActivitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcoming")
	ret0, _ := ret[0].(*controller.ActivitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcoming indicates an expected call of GetUpcoming
func (mr *MockActivityControllerMockRecorder) GetUpcoming() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcoming", reflect.TypeOf((*MockActivityController)(nil).GetUpcoming))
}

// GetForNotificaion mocks base method
func (m *MockActivityController) GetForNotificaion() (*controller.ActivitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForNotificaion")
	ret0, _ := ret[0].(*controller.ActivitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForNotificaion indicates an expected call of GetForNotificaion
func (mr *MockActivityControllerMockRecorder) GetForNotificaion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForNotificaion", reflect.TypeOf((*MockActivityController)(nil).GetForNotificaion))
}

// Create mocks base method
func (m *MockActivityController) Create(activity, showDate, date, annotation string, isImportant, isNotify int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", activity, showDate, date, annotation, isImportant, isNotify)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockActivityControllerMockRecorder) Create(activity, showDate, date, annotation, isImportant, isNotify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActivityController)(nil).Create), activity, showDate, date, annotation, isImportant, isNotify)
}

// UpdateByID mocks base method
func (m *MockActivityController) UpdateByID(id int, activity, showDate, date, annotation string, isImportant, isNotify int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, activity, showDate, date, annotation, isImportant, isNotify)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockActivityControllerMockRecorder) UpdateByID(id, activity, showDate, date, annotation, isImportant, isNotify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockActivityController)(nil).UpdateByID), id, activity, showDate, date, annotation, isImportant, isNotify)
}

// DeleteByID mocks base method
func (m *MockActivityController) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockActivityControllerMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockActivityController)(nil).DeleteByID), id)
}

// AdminGetAll mocks base method
func (m *MockActivityController) AdminGetAll() ([]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAll")
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAll indicates an expected call of AdminGetAll
func (mr *MockActivityControllerMockRecorder) AdminGetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAll", reflect.TypeOf((*MockActivityController)(nil).AdminGetAll))
}

// AdminGetByID mocks base method
func (m *MockActivityController) AdminGetByID(id int) (*controller.FieldsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetByID", id)
	ret0, _ := ret[0].(*controller.FieldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetByID indicates an expected call of AdminGetByID
func (mr *MockActivityControllerMockRecorder) AdminGetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetByID", reflect.TypeOf((*MockActivityController)(nil).AdminGetByID), id)
}
