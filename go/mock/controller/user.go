// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gomock "github.com/golang/mock/gomock"
	controller "homepage/pkg/interface/controller"
	reflect "reflect"
)

// MockUserController is a mock of UserController interface
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockUserController) GetAll() (*controller.UsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*controller.UsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserControllerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserController)(nil).GetAll))
}

// GetAllGroupByGrade mocks base method
func (m *MockUserController) GetAllGroupByGrade() (*controller.UsersGroupByGradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroupByGrade")
	ret0, _ := ret[0].(*controller.UsersGroupByGradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroupByGrade indicates an expected call of GetAllGroupByGrade
func (mr *MockUserControllerMockRecorder) GetAllGroupByGrade() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroupByGrade", reflect.TypeOf((*MockUserController)(nil).GetAllGroupByGrade))
}

// GetByID mocks base method
func (m *MockUserController) GetByID(userID int) (*controller.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID)
	ret0, _ := ret[0].(*controller.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserControllerMockRecorder) GetByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserController)(nil).GetByID), userID)
}

// GetByStudentID mocks base method
func (m *MockUserController) GetByStudentID(studentID string) (*controller.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStudentID", studentID)
	ret0, _ := ret[0].(*controller.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStudentID indicates an expected call of GetByStudentID
func (mr *MockUserControllerMockRecorder) GetByStudentID(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStudentID", reflect.TypeOf((*MockUserController)(nil).GetByStudentID), studentID)
}

// UpdateByID mocks base method
func (m *MockUserController) UpdateByID(userID int, name, studentID, department, comment string, grade int) (*controller.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", userID, name, studentID, department, comment, grade)
	ret0, _ := ret[0].(*controller.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockUserControllerMockRecorder) UpdateByID(userID, name, studentID, department, comment, grade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserController)(nil).UpdateByID), userID, name, studentID, department, comment, grade)
}

// UpdatePasswordByStudentID mocks base method
func (m *MockUserController) UpdatePasswordByStudentID(studentID, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByStudentID", studentID, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordByStudentID indicates an expected call of UpdatePasswordByStudentID
func (mr *MockUserControllerMockRecorder) UpdatePasswordByStudentID(studentID, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByStudentID", reflect.TypeOf((*MockUserController)(nil).UpdatePasswordByStudentID), studentID, oldPassword, newPassword)
}

// DeleteByID mocks base method
func (m *MockUserController) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockUserControllerMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserController)(nil).DeleteByID), id)
}

// Login mocks base method
func (m *MockUserController) Login(studentID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", studentID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockUserControllerMockRecorder) Login(studentID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserController)(nil).Login), studentID, password)
}

// AdminLogin mocks base method
func (m *MockUserController) AdminLogin(studentID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminLogin", studentID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminLogin indicates an expected call of AdminLogin
func (mr *MockUserControllerMockRecorder) AdminLogin(studentID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminLogin", reflect.TypeOf((*MockUserController)(nil).AdminLogin), studentID, password)
}

// AdminGetAll mocks base method
func (m *MockUserController) AdminGetAll() ([]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAll")
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAll indicates an expected call of AdminGetAll
func (mr *MockUserControllerMockRecorder) AdminGetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAll", reflect.TypeOf((*MockUserController)(nil).AdminGetAll))
}

// AdminGetByID mocks base method
func (m *MockUserController) AdminGetByID(userID int) (*controller.FieldsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetByID", userID)
	ret0, _ := ret[0].(*controller.FieldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetByID indicates an expected call of AdminGetByID
func (mr *MockUserControllerMockRecorder) AdminGetByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetByID", reflect.TypeOf((*MockUserController)(nil).AdminGetByID), userID)
}

// AdminCreate mocks base method
func (m *MockUserController) AdminCreate(name, studentID, department, comment, password, role string, grade int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreate", name, studentID, department, comment, password, role, grade)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreate indicates an expected call of AdminCreate
func (mr *MockUserControllerMockRecorder) AdminCreate(name, studentID, department, comment, password, role, grade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreate", reflect.TypeOf((*MockUserController)(nil).AdminCreate), name, studentID, department, comment, password, role, grade)
}

// AdminUpdateByID mocks base method
func (m *MockUserController) AdminUpdateByID(userID int, name, studentID, department, comment, role string, grade int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateByID", userID, name, studentID, department, comment, role, grade)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminUpdateByID indicates an expected call of AdminUpdateByID
func (mr *MockUserControllerMockRecorder) AdminUpdateByID(userID, name, studentID, department, comment, role, grade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateByID", reflect.TypeOf((*MockUserController)(nil).AdminUpdateByID), userID, name, studentID, department, comment, role, grade)
}
