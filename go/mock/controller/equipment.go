// Code generated by MockGen. DO NOT EDIT.
// Source: equipment.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gomock "github.com/golang/mock/gomock"
	controller "homepage/pkg/interface/controller"
	reflect "reflect"
)

// MockEquipmentController is a mock of EquipmentController interface
type MockEquipmentController struct {
	ctrl     *gomock.Controller
	recorder *MockEquipmentControllerMockRecorder
}

// MockEquipmentControllerMockRecorder is the mock recorder for MockEquipmentController
type MockEquipmentControllerMockRecorder struct {
	mock *MockEquipmentController
}

// NewMockEquipmentController creates a new mock instance
func NewMockEquipmentController(ctrl *gomock.Controller) *MockEquipmentController {
	mock := &MockEquipmentController{ctrl: ctrl}
	mock.recorder = &MockEquipmentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEquipmentController) EXPECT() *MockEquipmentControllerMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockEquipmentController) GetAll() (*controller.EquipmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*controller.EquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockEquipmentControllerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEquipmentController)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockEquipmentController) GetByID(id int) (*controller.EquipmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*controller.EquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockEquipmentControllerMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEquipmentController)(nil).GetByID), id)
}

// Create mocks base method
func (m *MockEquipmentController) Create(name, comment string, stock, tagID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, comment, stock, tagID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockEquipmentControllerMockRecorder) Create(name, comment, stock, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEquipmentController)(nil).Create), name, comment, stock, tagID)
}

// UpdateByID mocks base method
func (m *MockEquipmentController) UpdateByID(id int, name, comment string, stock, tagID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, name, comment, stock, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockEquipmentControllerMockRecorder) UpdateByID(id, name, comment, stock, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockEquipmentController)(nil).UpdateByID), id, name, comment, stock, tagID)
}

// DeleteByID mocks base method
func (m *MockEquipmentController) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockEquipmentControllerMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockEquipmentController)(nil).DeleteByID), id)
}

// AdminGetAll mocks base method
func (m *MockEquipmentController) AdminGetAll() ([]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAll")
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAll indicates an expected call of AdminGetAll
func (mr *MockEquipmentControllerMockRecorder) AdminGetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAll", reflect.TypeOf((*MockEquipmentController)(nil).AdminGetAll))
}

// AdminGetByID mocks base method
func (m *MockEquipmentController) AdminGetByID(id int) (*controller.FieldsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetByID", id)
	ret0, _ := ret[0].(*controller.FieldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetByID indicates an expected call of AdminGetByID
func (mr *MockEquipmentControllerMockRecorder) AdminGetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetByID", reflect.TypeOf((*MockEquipmentController)(nil).AdminGetByID), id)
}
